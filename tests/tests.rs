extern crate hex_slice;
extern crate tarantool;

use hex_slice::AsHex;
use tarantool::utils::scramble;

#[test]
fn scramble_test() {
    let scramble = scramble("WPE4wY2+RTBuFvElfHawAheh37sa58XKR/ZEOvgRsa8=".into(), "123".into());
    assert_eq!([0xAC, 0x3F, 0xAD, 0x90, 0x6F, 0xFE, 0x80, 0x28, 0x92, 0x79, 0xCE, 0xC3, 0xFC,
                0xDA, 0x0B, 0x86, 0xBD, 0x06, 0x2A, 0x69],
               &scramble[..]);
}

//#[test]
//fn build_auth_body_test() {
//    let auth_body = build_auth_body("test",
//                                    &[0xAC, 0x3F, 0xAD, 0x90, 0x6F, 0xFE, 0x80, 0x28, 0x92, 0x79,
//                                      0xCE, 0xC3, 0xFC, 0xDA, 0x0B, 0x86, 0xBD, 0x06, 0x2A, 0x69]
//                                         [..]);
//    assert_eq!(&[0x82, 0x23, 0xA4, 0x74, 0x65, 0x73, 0x74, 0x21, 0x92, 0xA9, 0x63, 0x68, 0x61,
//                 0x70, 0x2D, 0x73, 0x68, 0x61, 0x31, 0xC4, 0x14, 0xAC, 0x3F, 0xAD, 0x90, 0x6F,
//                 0xFE, 0x80, 0x28, 0x92, 0x79, 0xCE, 0xC3, 0xFC, 0xDA, 0xB, 0x86, 0xBD, 0x6,
//                 0x2A, 0x69]
//                    [..],
//               &auth_body[..]);
//}
//
//#[test]
//fn read_length_test() {
//    assert_eq!(5, read_length(&mut &[0xCE, 0x00, 0x00, 0x00, 0x5][..]));
//}
